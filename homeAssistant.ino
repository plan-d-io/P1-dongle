/*Home Assistant functions, e.g. MQTT autodiscovery*/

void haAutoDiscovery(String key, String unit, String deviceType, String friendlyName, String mqttTopic) {
  /*Create an MQTT device "Utility meter" in Home Assistant and register the enabled DSMR keys as entities
   * by sending a HA autodiscovery payload for each key.
   * This only needs to be done once, but it can't hurt repeating it from time to time (e.g. to overcome broker reboots).
   */
  /*if (!ha_en || !mqtt_en || mqttClientError) {
    return;
  }*/
  String tempTopic = mqttPrefix;
  if(mqttTopic == ""){           //Use key_name as mqtt topic if keyTopic left empty
    tempTopic += friendlyName;
    tempTopic.replace(" ", "_");
    tempTopic.toLowerCase();
  }
  else{
    tempTopic += mqttTopic;
    tempTopic.replace(" ", "_");
    tempTopic.toLowerCase();
  }
  if (!ha_metercreated) {
    //pubmqqt empty payload naar topic
    //erasemeter
    //syslog("Performing Home Assistant MQTT autodiscovery", 0); //dit moet ergens anders
  }
  DynamicJsonDocument doc(1024);
  friendlyName = "Utility meter " + friendlyName;
  doc["name"] = friendlyName;
  if(deviceType != "") doc["device_class"] = deviceType;
  if(unit != "") doc["unit_of_measurement"] = unit;
  doc["state_topic"] = tempTopic;
  if(deviceType == "energy" || deviceType == "gas" || deviceType == "water") doc["state_class"] = "total_increasing";
  else doc["state_class"] = "measurement";
  friendlyName.replace(" ", "_");
  friendlyName.toLowerCase();
  doc["unique_id"] = friendlyName;
  doc["object_id"] = friendlyName;
  doc["value_template"] = "{{ value_json.value }}";
  doc["availability_topic"] = mqttPrefix.substring(0, mqttPrefix.length()-1);
  JsonObject device  = doc.createNestedObject("device");
  JsonArray identifiers = device.createNestedArray("identifiers");
  identifiers.add("P1_utility_meter");
  device["name"] = "Utility meter";
  device["model"] = "P1 dongle for DSMR compatible utility meters";
  device["manufacturer"] = "plan-d.io";
  //device["configuration_url"] = "http://" + WiFi.localIP().toString();
  device["sw_version"] = String(fw_ver/100.0);
  String configTopic = "homeassistant/sensor/" + friendlyName + "/config";
  if(mqttDebug){
    Serial.println("");
    Serial.print(configTopic);
    Serial.print(" ");
    serializeJson(doc, Serial);
  }
}

void haEraseDevice(){
  /*This function erases all the existing HA MQTT entities generated by the dongle by sending an empty payload to their respective topics.
   * This prevents duplicate entities after a reboot, and ensures the HA entities always reflect the most recent state (e.g. after a firmware update
   * which changes certain parameters of the entities).
   */
  for(int i = 0; i < sizeof(dsmrKeys)/sizeof(dsmrKeys[0]); i++){ //erase all the DSMR keys
    String tempTopic = mqttPrefix;
    if(dsmrKeys[i].keyTopic == ""){
      tempTopic += dsmrKeys[i].keyName;
      tempTopic.replace(" ", "_");
      tempTopic.toLowerCase();
    }
    else{
      tempTopic += dsmrKeys[i].keyTopic;
      tempTopic.replace(" ", "_");
      tempTopic.toLowerCase();
    }
    if(mqttDebug){
      Serial.print("Erasing ");
      Serial.println(tempTopic);
    }
  }
  for(int i = 0; i < sizeof(mbusKeys)/sizeof(mbusKeys[0]); i++){  //erase all the mbus keys
    String tempTopic = mqttPrefix;
    if(mbusKeys[i].keyTopic == ""){ 
      tempTopic += mbusKeys[i].keyName;
      tempTopic.replace(" ", "_");
      tempTopic.toLowerCase();
    }
    else{
      tempTopic += mbusKeys[i].keyTopic;
      tempTopic.replace(" ", "_");
      tempTopic.toLowerCase();
    }
    if(mqttDebug){
      Serial.print("Erasing ");
      Serial.println(tempTopic);
    }
  }
}
